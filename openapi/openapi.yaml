openapi: 3.1.0
info:
  title: API
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
          '201':
            description: The created task
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Task'
  /tasks/{id}:
    delete:
      summary: Delete task by ID
      tags:
        - tasks
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the task to delete
          schema:
            type: integer
            format: uint
      responses:
        '204':
          description: Task successfully deleted
        '404':
          description: Task not found
        '500':
          description: Internal server error
    patch:
      summary: Update existing task by ID
      tags:
        - tasks
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the task to update
          schema:
            type: integer
            format: uint
      requestBody:
        description: The updated task
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Successfully update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create new user
      tags:
        - users
      requestBody:
        description: The user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    delete:
      summary: Delete user by ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
            format: uint
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
        '500':
          description: Internal server error
    patch:
      summary: Update existing user by ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to update
          schema:
            type: integer
            format: uint
      requestBody:
        description: The updated user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: uint
        task:
          type: string
        is_done:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
        password:
          type: string
